Monk's best friend Micro, who happen to be an awesome programmer, got him an integer
matrix M of size  for his birthday. Monk is taking coding classes from Micro. They have 
just completed array inversions and Monk was successful in writing a program to count the
number of inversions in an array. Now, Micro has asked Monk to find out the number of inversion
in the matrix M. 
Number of inversions, in a matrix is defined as the number of unordered pairs of cells  such that .
Monk is facing a little trouble with this task and since you did not got him any birthday gift, you need to help him with this task.

Input:
First line consists of a single integer T denoting the number of test cases.
First line of each test case consists of one integer denoting N. Following N lines consists of N space 
separated integers denoting the matrix M.

Output:
Print the answer to each test case in a new line.

Constraints:



SAMPLE INPUT 
2
3
1 2 3
4 5 6
7 8 9
2
4 3
1 4
SAMPLE OUTPUT 
0
2



Hint:
The correct output for this test case:
4
1 2 3 4
8 7 6 5
9 10 11 12
13 14 15 16
is: 6.
Because in the second line of the array there are these pair:
(8,7) , (8,6) , (8,5) , (7,6) , (7,5) , (6,5).
The concept is that when I'm in the i(th) row and j(th) column, I need to look just at 
the right and the down, and don't care about what there is at the left and the up.



Solution:
#include <iostream>
using namespace std;
int main()
{
	int n;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		int counter = 0;
		int matrix;
		cin >> matrix;

		int a[matrix][matrix];

		for (int i = 0; i < matrix; i++)
		{
			for (int j = 0; j < matrix; j++)
			{
				cin >> a[i][j];
			}
		}

		for (int i = 0; i < matrix; i++)
		{
			for (int j = 0; j < matrix; j++)
			{
				for (int k = i; k < matrix; k++)
				{
					for (int l = j; l < matrix; l++)
					{
						if (a[i][j] > a[k][l])
						{
							counter++;
						}
					}
				}
			}
		}

		cout << counter << endl;
	}
}

----------------------------------------------------The End---------------------------------------------------------
